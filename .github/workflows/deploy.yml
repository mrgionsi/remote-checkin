name: Deploy Docker Images

on:
  workflow_run:
    workflows: ["Build Flask and Angular with Docker"]
    types:
      - completed
  pull_request:
    branches:
      - dev  # Only trigger when PR is merged into dev
    types:
      - closed  # Trigger only when PR is merged
  workflow_dispatch:

jobs:
  compile:
    # Reuse the compile workflow (can even point to another repo, see the docs)
    uses: ./.github/workflows/build.yml

  deploy-images:
    if: github.event.pull_request.merged == true
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
#          run-id: ${{ github.event.workflow_run.id }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}


      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set Docker image tag
        id: docker_tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          else
            echo "TAG=alpha" >> $GITHUB_ENV
          fi

      - name: Build and tag Flask Docker image
        run: |
          ls -larth
          mkdir dist
          mv remote-checkin dist/
          docker build -t ghcr.io/${{ github.repository }}/remote-checkin-be:${{ env.TAG }} -f backend/Dockerfile backend/

      - name: Build and tag Angular Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/remote-checkin-fe:${{ env.TAG }} -f frontend/Dockerfile frontend/

      - name: Push Flask Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/remote-checkin-be:${{ env.TAG }}

      - name: Push Angular Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}/remote-checkin-fe:${{ env.TAG }}

  deploy:
    environment: pre-prod
    name: Trigger Portainer Deployment
    runs-on: ubuntu-latest
    needs: deploy-images
    steps:
      - name: Invoke Portainer Webhook
        run: |
          curl -X POST "${{ secrets.PORTAINER_WEBHOOK_URL }}"
